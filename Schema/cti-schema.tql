define
stix-object sub entity, 
	# Required
	owns stix-type,
	owns stix-id,
	owns custom-attribute,
	plays stix-core-relationship:active-role,
	plays stix-core-relationship:passive-role;

	stix-core-object sub stix-object, 
		# Required for SDO but Optional for SCO
		owns spec-version,

		# Optional
		owns extensions,

		plays object-marking:marked,
		plays creation:created,
		plays sighting:sighting-of,

		# Common relations for SDOs and SCOs. Defined in 3.7. 
		plays derivation:derived-from,
		plays derivation:deriving,
		plays duplicate:duplicated-object,
		plays relatedness:related-to;

			stix-domain-object sub stix-core-object, 
				# Required
				owns created,
				owns modified, 

				# Optional
				owns revoked, 
				owns labels,
				owns confidence,
				owns langs,
				plays external-referencing:referencing,

				plays indication:indicated;

			stix-cyber-observable-object sub stix-core-object,
				owns defanged, 
				plays reference:referred;

	stix-meta-object sub stix-object, 
		abstract, 
		owns created, 
		owns modified;

##### 2 Common Data Types #####

# 2.5 External Reference
external-reference sub stix-meta-object,
	# In addition to source-name, at least one of description, url or external-id must be present§
	# Required
	owns source-name, 

	# Optional
	owns description,
	owns url, 
	owns external-id,
	owns hash-general,
	plays external-referencing:referenced;

external-referencing sub relation, 
	relates referenced,
	relates referencing;

# 2.7 Hash
hash sub stix-attribute-string, abstract; 
	hash-general sub hash;
	md5 sub hash;
	sha-1 sub hash;

# 2.11 Kill Chane Phase
kill-chain-usage sub stix-core-relationship,
	relates kill-chain-used,
	relates kill-chain-using;

kill-chain-phase sub stix-meta-object,
	owns kill-chain-name, 
	owns phase-name,
	plays kill-chain-usage:kill-chain-using,

	# inferred role player
	plays kill-chain:participating-kill-chain-phase;

##### 4 STIX™ Domain Objects #####

# Custom object
custom-object sub stix-domain-object,
	owns name, 
	owns description, 
	owns alias, 
	owns first-seen,
	owns last-seen,
	owns objective,
	plays kill-chain-usage:kill-chain-used,
	plays delivery:delivering,
	plays target:targetting,
	plays use:used-by,
	plays mitigation:mitigated,
	plays use:used;


# 4.1 
attack-pattern sub stix-domain-object,
	# Attack Pattern Specific Properties
	owns name,
	owns description,
	owns alias,
	plays kill-chain-usage:kill-chain-used,

	# Relations
	plays delivery:delivering,
	plays target:targetting,
	plays use:used-by,

	# Reverse
	# plays indication:indicated, -> Defined in SDO
	plays mitigation:mitigated,
	plays use:used; 

	# Embedded Relations
	# Object marking ref

# 4.2 Campaign
campaign sub stix-domain-object, 
	owns name, 
	owns description, 
	owns alias, 
	owns first-seen,
	owns last-seen,
	owns objective, 


	# Relations
	plays attribution:attributing,
	plays compromise:compromising,
	plays origination:originating,
	plays target:targetting,
	plays use:used-by;

	# Reverse 
	# plays indication:indicated; -> Defined in SDO

	# Embedded relations
	# Object marking ref


# 4.3 Course of Action
course-of-action sub stix-domain-object,
	owns name, 
	owns description, 
	owns action,

	# Relations
	plays investigation:investigating,
	plays mitigation:mitigating,
	plays remediation:remediating;

	# Embedded relations
	# Object marking ref

# 4.4 Grouping 
grouping sub stix-domain-object,
	owns name, 
	owns description, 
	owns context;

	# TODO -> Object_refs

# 4.5 Identity
identity sub stix-domain-object,
	owns name, 
	owns description, 
	owns stix-role,
	owns sector,  # should this perhaps be a relation?
	owns contact-information,

	# Relations
	plays located-at:locating,

	# Reverse relations
	plays target:targetted,
	plays attribution:attributed, 

	# Embedded relations
	plays creation:creator,
	# Object marking ref

	plays sighting:saw;

	# 10.7 Identity Class Vocabulary
	individual sub identity;
	group sub identity;
	system sub identity;
	organization sub identity;
	class sub identity;
	id-unknown sub identity;

# 4.6 Incident
incident sub stix-domain-object, 
	owns name, 
	owns description;

	# Embedded relations
	# Object marking ref;

# 4.7 Indicator
indicator sub stix-domain-object, 
	owns name, 
	owns description, 
	owns indicator-type, # Should this be a relation to the open vocabulary?
						 # anomalous-activity, anonymization, benign, compromised, malicious-activity, attribution, unknown
	owns pattern, 
	owns pattern-type,   # should this open vocabulary be a relation? (stix, pcre, sigma, snort, suricata, yara)
	owns pattern-version,
	owns valid-from,
	owns valid-until,
	plays kill-chain-usage:kill-chain-used,

	# Relations
	plays indication:indicating,
	plays basing:basing-on,

	# Reverse
	plays investigation:investigated,
	plays mitigation:mitigated;

	# Embedded Relations
	# Object marking ref

# 4.8 Infrastructure 
infrastructure sub stix-domain-object,
	owns name, 
	owns description,
	owns infrastructure-type, # Should this OV be a relation to define?
	owns alias, 
	plays kill-chain-usage:kill-chain-used, 
	owns first-seen,
	owns last-seen,

	# Relations
	plays communication:communicating,
	plays consist:consisting,
	plays control:controling,

	plays delivery:delivering,
	plays have:having,
	plays host:hosting,
	plays located-at:locating,
	plays use:used-by,

	# Reverse Relations
	plays control:controled,
	plays communication:communicated,
	plays compromise:compromised,
	plays beacon:beaconed-to,
	plays exfiltrate:exfiltrated-to,
	plays host:hosted,
	# plays indication:indicated, defined in SDO
	plays ownership:owned,
	plays target:targetted,
	plays use:used;

	# Object marking ref

# 4.9 Intrusion Set
intrusion-set sub stix-domain-object,
	owns name, 
	owns description, 
	owns alias, 
	owns first-seen,
	owns last-seen,
	owns goals, 
	owns resource-level, 
	owns primary-motivation, 
	owns secondary-motivations,

	# Relations
	plays attribution:attributing,
	plays compromise:compromising,
	plays host:hosting,
	plays ownership:owning,
	plays origination:originating,
	plays target:targetting, 
	plays use:used-by,

	# Reverse Relations
	plays attribution:attributed, 
	plays authorship:authored,
	# plays indication:indicated; Already defined in SDO

	# Inferred role player
	plays inferred-mitigation:mitigated;

	# OBject marking 

# 4.10 Location
location sub stix-domain-object,
	owns name, 
	owns description,
	owns latitude,
	owns longitude,
	owns precision,
	owns region,
	owns country,
	owns administrative-area,
	owns city,
	owns street-address,
	owns postal-code,

	# Relations
	# NA

	# Reverse relations
	plays located-at:located,
	plays origination:originated-from,
	plays target:targetted;

	# Object marking

# 4.11 Malware
malware sub stix-domain-object, 
	owns name, 
	owns description, 
	owns malware-type, # Should this be a relation to define the type?
	owns is-family, 
    owns alias,
    plays kill-chain-usage:kill-chain-used,
    owns first-seen,
    owns last-seen,
    
    owns operating-system-refs, # Needs to be a relation to software
    # The value of this property MUST be the identifier for a SCO software object. 
    
    owns architecture-execution-envs,
    owns implementation-languages,
    owns capability,
    
    owns sample-refs, # Needs to be a relation to file or artifact
    # The sample_refs property specifies a list of identifiers of the SCO file 
    # or artifact objects associated with this malware instance(s) or family.

    # Relations
    plays authorship:authoring,
    plays beacon:beaconing-to,
    plays exfiltrate:exfiltrating-to,
    plays control:controling,
    plays download:downloading,
    plays drop:dropping,
    plays exploit:exploiting,
    plays origination:originating,
    plays target:targetting,
    plays host:hosting,
    plays use:used-by,
    plays variant:variant-source,

   	# Reverse relations
   	plays variant:variant-target,
   	plays delivery:delivered,
   	plays mitigation:mitigated,
	plays remediation:remediated,
	plays use:used,
	plays drop:dropped,
	plays control:controled,
	plays characterise:characterised,
	plays av-analysis:analysed,
	plays statis-analysis:analysed,
	plays dynamic-analysis:analysed,

    plays download:downloaded,
    plays exploit:exploiting;

    # Embedded Relations
    # Obejct marking
    # Sample ref


# 4.12 Malware Analysis
malware-analysis sub stix-domain-object,

	plays characterise:characterising,
	plays av-analysis:analysing,
	plays statis-analysis:analysing,
	plays dynamic-analysis:analysing;

# 4.13 Note
note sub stix-domain-object; #TODO

# 4.14
observed-data sub stix-domain-object,
	owns first-observed, 
	owns last-observed, 
	owns number-observed,
	owns object,
	plays sighting:observed,
	plays reference:referring,
	plays basing:based-on;

# 4.15 Opinion
opinion sub stix-domain-object; #TODO

# 4.16 Report
report sub stix-domain-object; #TODO

# 4.17
threat-actor sub stix-domain-object,
	owns name, 
	owns description, 
	owns threat-actor-type,
	owns alias,
	owns first-seen,
	owns last-seen,
	owns stix-role,
	owns goals,
	owns sophistication,
	owns resource-level, 
	owns primary-motivation,
	owns secondary-motivations,
	owns personal-motivations,
	plays compromise:compromising,
	plays target:targetting,
	plays attribution:attributing,
	plays attribution:attributed,
	plays use:used-by,
	plays located-at:locating;

# 4.18 Tool
tool sub stix-domain-object,
	owns name,
	owns description,
	owns tool-type,
	owns alias, 
	owns tool-version,

	plays delivery:delivering,
	plays drop:dropping,
	plays have:having,
	plays target:targetting,
	plays use:used-by,
	plays use:used,
	plays host:hosted,
	plays download:downloaded,
	plays drop:dropped,
	# plays indication:indicated, Already defined in SDO
	plays mitigation:mitigated,
	plays kill-chain-usage:kill-chain-used;

# 4.19 Vulnerability TODO
vulnerability sub stix-domain-object,
	plays have:had,
 	plays target:targetted,
 	plays exploit:exploited,
 	plays remediation:remediated;

##### 5 STIX™ Relationship Objects #####

# 5.2 Sighting
sighting sub stix-core-relationship, 
	owns first-seen,
	owns last-seen,
	owns count,
	owns summary,
	relates saw,
	relates sighting-of, 
	relates observed;

##### 6 STIX™ Cyber-observable Objects ##### 

# 6.1 Artifact Object

# 6.2 Autonomous System Object

# 6.3 Directory Object

# 6.4 Domain Name Object
domain-name sub stix-cyber-observable-object,
	plays communication:communicated;

# 6.5 Email Address Object

# 6.6 Email Message

# 6.7 File
file sub stix-cyber-observable-object,
	owns size,
	owns name, 
	owns hash-general,
	owns md5,
	owns sha-1,

	plays download:downloaded;

# 6.8 IPv4 Address
ipv4-address sub stix-cyber-observable-object,
	plays communication:communicated;

# 6.9 IPv6 Address
ipv5-address sub stix-cyber-observable-object,
	plays communication:communicated;

# 6.10 MAC Address

# 6.11 Mutex

# 6.12 Network Traffice

# 6.13 Process 

# 6.14 Software

# 6.15 URL
url-object sub stix-cyber-observable-object,
	owns value,
	plays communication:communicated;

# 6.16 User Account

# 6.17
windows-registry-key sub stix-cyber-observable-object, 
	owns attribute-key, 
	owns values, 
	owns modified-time, 
	owns number-subkeys, 
	owns values;

# 6.18 X.509 Certificate

##### 7 STIX™ Meta Objects #####

# 7.1 Language Content 

# owns spec-version

# 7.2 Data markings - this describes how data can be used/shared

marking-definition sub stix-meta-object,
	owns name, 
	owns spec-version,
	plays creation:created,
	plays data-marking:marking;

	statement-marking sub marking-definition, 
		owns statement; 

	tlp-marking sub marking-definition;
		tlp-white sub tlp-marking;
		tlp-green sub tlp-marking;
		tlp-amber sub tlp-marking;
		tlp-red sub tlp-marking;


data-marking sub relation, 
	relates marking,
	relates marked;

	object-marking sub data-marking; 

	granular-marking sub data-marking; 

# 7.3 Extension Definition

##### RELATIONSHIPS - APENDIX B #####

stix-core-relationship sub relation, # in conceptMapper
	# Required
	owns spec-version,
	owns stix-id, 
	owns created,
	owns modified,
	owns stix-type,

	# Optional
	owns description,
	owns revoked,
	owns labels,
	owns confidence, 
	owns langs,
	owns extensions, 

	owns custom-attribute,

	relates active-role, 
	relates passive-role,
	plays object-marking:marked, 
	plays external-referencing:referencing;


	delivery sub stix-core-relationship, 
		relates delivering, 
		relates delivered;

	target sub stix-core-relationship, 
		relates targetting,
		relates targetted;

	attribution sub stix-core-relationship, 
		relates attributing,
		relates attributed; 

	mitigation sub stix-core-relationship,
		relates mitigated,
		relates mitigating;

	indication sub stix-core-relationship, 
		relates indicating,
		relates indicated; 

	creation sub stix-core-relationship, 
		relates created,
		relates creator;

	reference sub stix-core-relationship, 
		relates referred,
		relates referring;

	use sub stix-core-relationship,
		relates used-by,
		relates used;

	located-at sub stix-core-relationship,
		relates located,
		relates locating;

	origination sub stix-core-relationship,
		relates originated-from,
		relates originating;

	have sub stix-core-relationship, # Could come up with a better name?
		relates having,
		relates had;

	host sub stix-core-relationship,
		relates hosting,
		relates hosted;

	ownership sub stix-core-relationship,
		relates owned,
		relates owning;

	compromise sub stix-core-relationship,
		relates compromising,
		relates compromised;

	authorship sub stix-core-relationship,
		relates authoring,
		relates authored;

	drop sub stix-core-relationship,
		relates dropped,
		relates dropping;
	
	download sub stix-core-relationship,
		relates downloaded,
		relates downloading;

	exploit sub stix-core-relationship,
		relates exploiting,
		relates exploited;

	investigation sub stix-core-relationship,
		relates investigating,
		relates investigated;

	remediation sub stix-core-relationship,
		relates remediating,
		relates remediated;

	basing sub stix-core-relationship,
		relates basing-on,
		relates based-on;

	communication sub stix-core-relationship,
		relates communicating,
		relates communicated;

	consist sub stix-core-relationship,
		relates consisting,
		relates consisted;

	control sub stix-core-relationship,
		relates controling,
		relates controled;

	beacon sub stix-core-relationship,
		relates beaconed-to,
		relates beaconing-to;

	exfiltrate sub stix-core-relationship,
		relates exfiltrated-to,
		relates exfiltrating-to;

	variant sub stix-core-relationship,
		relates variant-source,
		relates variant-target;

	characterise sub stix-core-relationship,
		relates characterised,
		relates characterising;

	analysis sub stix-core-relationship,
		relates analysing,
		relates analysed;

		av-analysis sub analysis;
		statis-analysis sub analysis;
		dynamic-analysis sub analysis;

# 3.7 Common Relationships 
# These are relation types that are shared by SDOs and SCOs

derivation sub relation, 
	relates derived-from,
	relates deriving;

duplicate sub relation, 
	relates duplicated-object; 

relatedness sub relation,
	relates related-to; 

## INFERRED RELATIONS ## 

kill-chain sub relation, 
	owns kill-chain-name, 
	relates participating-kill-chain-phase; 

inferred-mitigation sub mitigation;

##### ATTRIBUTES #####

stix-attribute-string sub attribute, value string, abstract,
	plays granular-marking:marked;

	stix-type sub stix-attribute-string;
	stix-id sub stix-attribute-string;
	object-marking-refs sub stix-attribute-string;
	created sub stix-attribute-string;
	modified sub stix-attribute-string;
	revoked sub stix-attribute-string;
	labels sub stix-attribute-string;
	confidence sub stix-attribute-string;
	langs sub stix-attribute-string;
	defanged sub stix-attribute-string;
	extensions sub stix-attribute-string;
	source-name sub stix-attribute-string;
	description sub stix-attribute-string;
	url sub stix-attribute-string;
	external-id sub stix-attribute-string;

	kill-chain-name sub stix-attribute-string; 
	phase-name sub stix-attribute-string; 
	name sub stix-attribute-string; 
	sector sub stix-attribute-string; 
	contact-information sub stix-attribute-string; 
	indicator-type sub stix-attribute-string; 
	pattern sub stix-attribute-string; 
	pattern-type sub stix-attribute-string; 
	pattern-version sub stix-attribute-string; 
	valid-from sub stix-attribute-string; 
	valid-until sub stix-attribute-string; 

	malware-type sub stix-attribute-string; 
	first-seen sub stix-attribute-string; 
	last-seen sub stix-attribute-string; 
	operating-system-refs sub stix-attribute-string; 
	architecture-execution-envs sub stix-attribute-string; 
	implementation-languages sub stix-attribute-string; 
	capability sub stix-attribute-string; 
	sample-refs sub stix-attribute-string; 

	first-observed sub stix-attribute-string; 
	last-observed sub stix-attribute-string; 
	object sub stix-attribute-string; 

	threat-actor-type sub stix-attribute-string; 
	alias sub stix-attribute-string; 
	first-seen sub stix-attribute-string; 
	last-seen sub stix-attribute-string; 
	stix-role sub stix-attribute-string; 
	goals sub stix-attribute-string; 
	sophistication sub stix-attribute-string; 
	resource-level sub stix-attribute-string; 
	primary-motivation sub stix-attribute-string; 
	secondary-motivations sub stix-attribute-string; 
	personal-motivations sub stix-attribute-string; 

	first-seen sub stix-attribute-string; 
	last-seen sub stix-attribute-string; 
	summary sub stix-attribute-string; 

	spec-version sub stix-attribute-string; 
	 
	attribute-key sub stix-attribute-string; 
	values sub stix-attribute-string; 
	modified-time sub stix-attribute-string; 
	number-subkeys sub stix-attribute-string; 
	values sub stix-attribute-string; 
	objective sub stix-attribute-string;
	statement sub stix-attribute-string;
	action sub stix-attribute-string;  
	tool-type sub stix-attribute-string; # OPEN VOCAB?
	tool-version sub stix-attribute-string; 

	region sub stix-attribute-string; # open vocab TODO (10.21 Region Vocabulary)
	country sub stix-attribute-string; 
	administrative-area sub stix-attribute-string; 
	city sub stix-attribute-string; 
	street-address sub stix-attribute-string; 
	postal-code sub stix-attribute-string; 
	value sub stix-attribute-string; 
	infrastructure-type sub stix-attribute-string;
	context sub stix-attribute-string;

stix-attribute-long sub attribute, value long, abstract,
	plays granular-marking:marked;		

	size  sub stix-attribute-long; 
	count sub stix-attribute-long; 
	number-observed sub stix-attribute-long; 

stix-attribute-double sub attribute, value double, abstract,
	plays granular-marking:marked;		

	latitude sub stix-attribute-double;
	longitude sub stix-attribute-double;
	precision sub stix-attribute-double;

stix-attribute-boolean sub attribute, value boolean, abstract, 
	plays granular-marking:marked;
	
	is-family sub stix-attribute-boolean;

custom-attribute sub attribute, value string, 
	owns attribute-type; 
attribute-type sub attribute, value string;

##### Rules #####

# Description
# These two rules create a relation of type kill-chain between all the kill-chain-phase entities
# that have the same name. The first rule infers the relation, and the second rule infers the attribute 
# kill-chain-name. We need to split this up into two rules as we can only infer one relation or one attribute 
# per rule. 
# Example: 
# If we have many different kill-chain-phase entites that are called "Mitre Attack", but with different phases, 
# we can infer a kill-chain relation between all the phases in that kill chain. This makes it easy for us to 
# query across all the phases in that kill chain. 
rule part-of-one-kill-chain-relation:
when {
	$kill-chain-1 isa kill-chain-phase, has kill-chain-name $x;
	$kill-chain-2 isa kill-chain-phase, has kill-chain-name $x;
	not {$kill-chain-1 is $kill-chain-2;};
} then {
	(participating-kill-chain-phase: $kill-chain-1, participating-kill-chain-phase: $kill-chain-2) isa kill-chain;
};
rule part-of-one-kill-chain-attribute-name:
when {
	$kill-chain-1 isa kill-chain-phase, has kill-chain-name $x;
	$kill-chain-2 isa kill-chain-phase, has kill-chain-name $x;
	not {$kill-chain-1 is $kill-chain-2;};
	$kill-chain (participating-kill-chain-phase: $kill-chain-1, participating-kill-chain-phase: $kill-chain-2) isa kill-chain;
} then {
	$kill-chain has $x;
};

# Description
# This rule infers that if X is using Y, and if Y is using Z, then that means that X is also using Z
# Example: 
# If an intrusion set is using a malware, and if that malware is using a specific attack pattern, 
# then we want to infer that that intrusion set is using that specific attack pattern 
rule transitive-use:
when {
	$x isa stix-domain-object, has name $name1;
	$y isa stix-domain-object, has name $name2;
	$z isa stix-domain-object, has name $name3;
	$use1 (used-by: $x, used: $y) isa use;
	$use2 (used-by: $y, used: $z) isa use;
} then {
	(used-by: $x, used: $z) isa use;
};

# Description: 
# If y has been attributed to x, and if y is using z, then we infer that x is using z also
# Example: 
# If an identity has been attributed to a threat actor, 
# and if that identity is using a malware, then we want to create a "use" relation
# between the threat actor and the malware; the threat actor is using the malware 
# through the identiy
rule attribution-when-using:
when {
	(attributing: $x, attributed: $y) isa attribution; 
	(used-by: $y, used: $z) isa use; 
} then {
	(used-by: $x, used: $z) isa use;
};

# Description: 
# If y has been attributed to x, and if y is targetting z, then we can infer that x is targetting z
# Example: 
# If an attack pattern, for example "spear fishing", has been attributed to a specific identity named "Bravo",
# and if that attack pattern is targetting a location, for example New York, 
# we can infer that the identiy "Bravo" is targeting the location New York
rule attribution-when-targetting:
when {
	(attributing: $x, attributed: $y) isa attribution; 
	(targetting: $y, targetted: $z) isa target; 
} then {
	(targetting: $x, targetted: $z) isa target;
};

# Description
# This rule infers a relation of type inferred-mitigation between a course of action and an intursion set, if the 
# course of action mitigates an SDO which is used by an intrusion set. Note: as the relation "use" is transitive (see rule above),
# the SDO and the intrusion set may not be directly connected. 
# Example:
# The entity type "course-of-action" with name "Restrict File and Directory Permissions" is mitigating against an entity "attack-pattern" 
# with name "indicator Blocking". If that "attack-pattern" is being used by an entiy of type "intrusion-set" with name "BlackTech", then an i
# nferred relation of type "inferred-mitigation" will be created between the "course-of-action" and "the intrusion-set"
rule mitigating-course-of-action-with-intrusion-set:
when {
	$course-of-action isa course-of-action, has name $name1;
	$sdo isa stix-domain-object, has name $name2;
	$intrusion-set isa intrusion-set, has name $name3;
	$mitigation (mitigating: $course-of-action, mitigated: $sdo) isa mitigation;
	$use (used: $sdo, used-by: $intrusion-set) isa use; 
	
} then {
	(mitigating: $course-of-action, mitigated: $intrusion-set) isa inferred-mitigation;
};

